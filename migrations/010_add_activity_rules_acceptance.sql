-- Migration 010: Add Activity Rules Acceptance Fields
-- This migration adds fields to track activity rules acceptance for users

-- Start transaction
BEGIN;

-- Add columns for activity rules acceptance to users table
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS activity_rules_accepted BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS activity_rules_accepted_at TIMESTAMP,
ADD COLUMN IF NOT EXISTS activity_rules_version VARCHAR(10) DEFAULT '1.0';

-- Create activity_rules_versions table to store activity rules content
CREATE TABLE IF NOT EXISTS activity_rules_versions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    version VARCHAR(10) NOT NULL UNIQUE,
    title VARCHAR(200) NOT NULL DEFAULT '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
    description TEXT,
    rules_content JSONB NOT NULL, -- Store structured rules data as JSON
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create user_activity_rules_acceptance table for audit trail
CREATE TABLE IF NOT EXISTS user_activity_rules_acceptance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    rules_version VARCHAR(10) NOT NULL,
    accepted_at TIMESTAMP DEFAULT NOW(),
    ip_address VARCHAR(45),
    user_agent TEXT,
    UNIQUE(user_id, rules_version)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_activity_rules_accepted ON users(activity_rules_accepted);
CREATE INDEX IF NOT EXISTS idx_users_activity_rules_accepted_at ON users(activity_rules_accepted_at);
CREATE INDEX IF NOT EXISTS idx_users_activity_rules_version ON users(activity_rules_version);
CREATE INDEX IF NOT EXISTS idx_activity_rules_versions_active ON activity_rules_versions(active);
CREATE INDEX IF NOT EXISTS idx_user_activity_rules_user_id ON user_activity_rules_acceptance(user_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_rules_accepted_at ON user_activity_rules_acceptance(accepted_at);

-- Insert initial activity rules content (version 1.0)
INSERT INTO activity_rules_versions (version, title, description, rules_content, active) 
SELECT 
    '1.0',
    '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°',
    '‡∏â‡∏•‡∏≠‡∏á 10 ‡∏•‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°! ‡∏£‡πà‡∏ß‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏∏‡πâ‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢',
    '{
        "objective": {
            "title": "üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
            "content": [
                "üéâ ‡∏â‡∏•‡∏≠‡∏á 10 ‡∏•‡πâ‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°!",
                "‡∏£‡πà‡∏ß‡∏°‡πÇ‡∏´‡∏ß‡∏ï‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏∏‡πâ‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢",
                "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô Ananped ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà!"
            ]
        },
        "participation": {
            "title": "üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°",
            "rules": [
                {
                    "title": "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á",
                    "description": "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Subscriber ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Ananped"
                },
                {
                    "title": "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    "description": "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                },
                {
                    "title": "‡πÇ‡∏´‡∏ß‡∏ï",
                    "description": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏ß‡∏ï‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö (1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)"
                },
                {
                    "title": "‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå",
                    "description": "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                }
            ]
        },
        "prizes": {
            "title": "üéÅ ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
            "items": [
                {
                    "icon": "üèÜ",
                    "rank": "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1",
                    "prize": "‡πÑ‡∏≠‡πÇ‡∏ü‡∏ô‡∏£‡∏∏‡πà‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (1 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)"
                },
                {
                    "icon": "ü•à",
                    "rank": "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2", 
                    "prize": "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î 50,000 ‡∏ö‡∏≤‡∏ó (3 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)"
                },
                {
                    "icon": "ü•â",
                    "rank": "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3",
                    "prize": "‡∏Å‡∏¥‡∏ü‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î 10,000 ‡∏ö‡∏≤‡∏ó (10 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)"
                },
                {
                    "icon": "üéä",
                    "rank": "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à",
                    "prize": "‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå Ananped (100 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•)"
                }
            ]
        },
        "important_rules": {
            "title": "‚ö†Ô∏è ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
            "rules": [
                "‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÇ‡∏´‡∏ß‡∏ï: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏ß‡∏ï‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google",
                "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                "‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
                "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô: ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏î‡πâ",
                "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
            ]
        },
        "timeline": {
            "title": "üìÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£",
            "events": [
                {
                    "date": "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ - 31 ‡∏ò.‡∏Ñ. 2567",
                    "event": "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï"
                },
                {
                    "date": "1 ‡∏°.‡∏Ñ. 2568",
                    "event": "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï"
                },
                {
                    "date": "5 ‡∏°.‡∏Ñ. 2568", 
                    "event": "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                },
                {
                    "date": "10 ‡∏°.‡∏Ñ. 2568",
                    "event": "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
                }
            ]
        }
    }',
    TRUE
WHERE NOT EXISTS (SELECT 1 FROM activity_rules_versions WHERE version = '1.0');

-- Enable RLS for new tables
ALTER TABLE activity_rules_versions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_activity_rules_acceptance ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for activity rules tables
-- Anyone can read active activity rules versions
DROP POLICY IF EXISTS "Anyone can read active activity rules" ON activity_rules_versions;
CREATE POLICY "Anyone can read active activity rules" ON activity_rules_versions
    FOR SELECT USING (active = TRUE);

-- Users can read their own activity rules acceptance records  
DROP POLICY IF EXISTS "Users can read own activity rules acceptance" ON user_activity_rules_acceptance;
CREATE POLICY "Users can read own activity rules acceptance" ON user_activity_rules_acceptance
    FOR SELECT USING (user_id::text = auth.uid()::text);

-- Users can create activity rules acceptance records
DROP POLICY IF EXISTS "Users can create activity rules acceptance" ON user_activity_rules_acceptance;
CREATE POLICY "Users can create activity rules acceptance" ON user_activity_rules_acceptance
    FOR INSERT WITH CHECK (true);

-- Create function to update activity rules acceptance timestamp
CREATE OR REPLACE FUNCTION update_activity_rules_acceptance()
RETURNS TRIGGER AS $$
BEGIN
    -- If activity_rules_accepted is being set to true and it wasn't true before
    IF NEW.activity_rules_accepted = TRUE AND (OLD.activity_rules_accepted IS NULL OR OLD.activity_rules_accepted = FALSE) THEN
        NEW.activity_rules_accepted_at := NOW();
    END IF;
    
    NEW.updated_at := NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for activity rules acceptance
DROP TRIGGER IF EXISTS update_activity_rules_acceptance_trigger ON users;
CREATE TRIGGER update_activity_rules_acceptance_trigger
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_activity_rules_acceptance();

-- Grant permissions for new tables and functions
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON TABLE activity_rules_versions TO anon, authenticated;
GRANT ALL ON TABLE user_activity_rules_acceptance TO anon, authenticated;
GRANT EXECUTE ON FUNCTION update_activity_rules_acceptance() TO anon, authenticated;

-- Commit transaction
COMMIT;

-- Log completion
INSERT INTO schema_migrations (version, applied_at) 
VALUES ('010_add_activity_rules_acceptance', NOW()) 
ON CONFLICT (version) DO NOTHING;

-- Display migration completion message
DO $$
BEGIN
    RAISE NOTICE 'Migration 010_add_activity_rules_acceptance.sql completed successfully!';
    RAISE NOTICE 'Added: activity_rules_accepted, activity_rules_versions table, and audit trail';
END
$$;